package com.dss.repository.test.hibernate.revocation;

import java.util.List;
import java.util.Optional;

import com.dss.repository.test.hibernate.model.CrlEntry;
import com.dss.repository.test.hibernate.repositories.ICrlEntryRepository;

import eu.europa.esig.dss.DSSRevocationUtils;
import eu.europa.esig.dss.DSSUtils;
import eu.europa.esig.dss.crl.CRLValidity;
import eu.europa.esig.dss.x509.CertificateToken;
import eu.europa.esig.dss.x509.revocation.crl.CRLToken;

// tag::demo[]
public class HibernateCrlSource extends HibernateRevocationSource<CRLToken>{
	
	private static final long serialVersionUID = 4546907934788683669L;
	
	private ICrlEntryRepository crlEntryRepository;
	
	public void setRepository(ICrlEntryRepository repo) {
		this.crlEntryRepository = repo;
	}

	@Override
	public List<String> initRevocationTokenKey(CertificateToken certificateToken) {
		return DSSRevocationUtils.getCRLRevocationTokenKeys(certificateToken);
	}

	@Override
	public CRLToken findRevocation(String key, CertificateToken certificateToken, CertificateToken issuerCertToken) {
		Optional<CrlEntry> opCrl = crlEntryRepository.findById(key);
		if (opCrl == null || !opCrl.isPresent()) {
			return null;
		}
		CrlEntry cEntry = opCrl.get();
		if (cEntry == null) {
			return null;
		}
		final CRLValidity cached = new CRLValidity();
		cached.setKey(cEntry.getKey());
		cached.setNextUpdate(cEntry.getNextUpdate());
		cached.setIssuerToken(DSSUtils.loadCertificate(cEntry.getIssuer()));
		cached.setSignatureIntact(true);
		cached.setCrlEncoded(cEntry.getCrlEncoded());
		return new CRLToken(certificateToken, cached);
	}

	@Override
	protected void insertRevocation(final CRLToken token) {
		CRLValidity crlValidity = token.getCrlValidity();
		CrlEntry crlEntry = new CrlEntry(token.getRevocationTokenKey(), token.getNextUpdate(), crlValidity.getIssuerToken().getEncoded(), crlValidity.getCrlEncoded());
		crlEntryRepository.save(crlEntry);
	}

	@Override
	protected void updateRevocation(final CRLToken token) {
		CRLValidity crlValidity = token.getCrlValidity();
		CrlEntry cEntry = crlEntryRepository.findById(token.getRevocationTokenKey()).get();
		cEntry.setNextUpdate(token.getNextUpdate());
		cEntry.setIssuer(crlValidity.getIssuerToken().getEncoded());
		cEntry.setCrlEncoded(crlValidity.getCrlEncoded());
		crlEntryRepository.save(cEntry);
	}

	@Override
	protected void removeRevocation(CRLToken token) {
		Optional<CrlEntry> optCrl = crlEntryRepository.findById(token.getRevocationTokenKey());
		if (!optCrl.isPresent()) {
			crlEntryRepository.delete(optCrl.get());
		}
	}

}
// end::demo[]
